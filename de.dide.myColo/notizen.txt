nächste Schritte:

	CommandLine Funktionalität durch weitere Parameter erweitern (Scanner in)


 	Rundenbasiertes Spielmodell logisch definieren ;)
			
			List<Unit> getAllUnitsOfPlayersMap() {
				List<Unit> allUnits = new List<Unit>; 
				for x < gameFieldSize
					for y < gameFieldSize
					 	for i < gameField.getCell[x][y].getUnitList().size()
							allUnits.append(gameField.getCell[x][y].getUnit(i));
				
			void setAllUnitsOnPlayersMap(List<Unit> list) {
				 
				for x < gameFieldSize
					for y < gameFieldSize
					 	for i < gameField.getCell[x][y].getUnitList().size()
							allUnits.append(gameField.getCell[x][y].addUnit(i));


				
	pro Zug:
		liste mit allen Units einlesen		
		liste nach prioritäten ordnen
		//liste abarbeiten
			
		
irgendwie unitList mit an gameCell verbinden bzw zuweisungsfunktion	


for year:

checkForGameEvents
	//colGameMethoden
			neue karte einlesen (zwecks anderer Player, andere Länder (AI))
			(year++)
			 
	//siedlungen updaten (gibt es neuerungen? 
								gebäude fertig
								siedler erlernt Beruf
								Siedler verhungert
								...
			
gamecells aktualisieren 
	unitList aktualisieren oder ersetzen
	Farben aktualisieren (welches land/player hält die zelle, ...)
update zeichnet alle gamecells neu


=====================================
jetzt erstmal:

		
		unitList mit GameCell verbinden




